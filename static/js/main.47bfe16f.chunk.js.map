{"version":3,"sources":["components/DayListItem.js","components/DayList.js","components/Appointment/Header.js","components/Appointment/Empty.js","components/Appointment/Show.js","components/Button.js","components/InterviewerListItem.js","components/InterviewerList.js","components/Appointment/Form.js","components/Appointment/Status.js","components/Appointment/Confirm.js","components/Appointment/Error.js","components/Appointment/index.js","hooks/useVisualMode.js","components/Application.js","hooks/useApplicationData.js","helpers/selectors.js","index.js"],"names":["DayListItem","props","dayClass","classNames","selected","spots","React","createElement","data-testid","onClick","setDay","name","className","formatSpots","DayList","days","map","day","key","id","value","onChange","Header","time","Empty","onAdd","src","alt","Show","student","interviewer","onEdit","onDelete","Button","buttonClass","confirm","danger","disabled","children","InterviewerListItem","interviewerClass","setInterviewer","avatar","InterviewerList","interviewers","Form","_useState","useState","_useState2","_slicedToArray","setStudent","_useState3","_useState4","_useState5","_useState6","error","setError","onSubmit","event","preventDefault","autoComplete","type","placeholder","target","onCancel","onSave","Status","message","Confirm","onConfirm","Error","onClose","Appointment","_useVisualMode","initialMode","mode","setMode","history","setHistory","transition","newMode","replace","arguments","length","undefined","prev","_toConsumableArray","concat","back","historyCopy","pop","useVisualMode","interview","save","bookInterview","then","catch","e","deleteInterview","confirmation","cancelInterview","Application","_useApplicationData","appointments","state","setState","updateSpots","index","mutatedDays","remainingSpots","appointmentId","_objectSpread","_defineProperty","mutatedDaysArr","Object","values","useEffect","axios","get","Promise","all","data","appointment","put","delete","useApplicationData","dailyAppointments","final","_step","_iterator","_createForOfIteratorHelper","s","n","done","i","err","f","_step2","_iterator2","push","getAppointmentsForDay","dailyInterviewers","interviewersId","_step3","_iterator3","_step4","_iterator4","getInterviewersForDay","renderAppointment","getInterview","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47bfe16f.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nimport \"components/DayListItem.scss\";\n\n//This renders a single HTML element. In the left menu. these work as buttons but they also display information: Week Day, spots remaining\n//Depending on the state it displays different styles: default style, not selected, selected, hover(handled by scss), schedule is full for the day (0 spots remaining)\nexport default function DayListItem(props) {\n  //classnames is a js module it takes in 2 parameters, a string and an object, the string will always return but the object will return the key(s) only if the value of that key equals to truthy. This module is better than using if statements\n  let dayClass = classNames(\n    //button will always return as a classnames since it's the default class\n    'day-list__item',\n    {\n      //this will only return if \"confirm\" is passed as a prop, same for the pairs below\n      \"day-list__item--selected\": props.selected,\n      \"day-list__item--full\": (props.spots === 0)\n    }\n  );\n  \n  //display different text string depending on what comes in as props.spots\n  const formatSpots = (props) => {\n    if (props.spots === 1) {\n      return props.spots + \" spot remaining\";\n    }\n\n    if (props.spots > 1) {\n      return props.spots + \" spots remaining\";\n    }\n\n    if (props.spots === 0) {\n      return \"no spots remaining\";\n    }\n  };\n\n  return (\n    <li\n      data-testid=\"day\"\n      onClick={() => props.setDay(props.name)}\n      className={dayClass}\n    >\n      <h2 className=\"text--regular\">{props.name}</h2>\n      <h3 className=\"text--light\">{formatSpots(props)}</h3>\n    </li>\n  );\n}","import React from \"react\";\nimport DayListItem from \"components/DayListItem\";\n\n//Render a list of <DayListItem> components passing in default props\n//iterate through an array of objects and for each object render an HTML element\nexport default function DayList(props) {\n  const days = props.days.map((day) => {\n     \n    return (\n      <DayListItem\n        key = {day.id}\n        name = {day.name}\n        spots = {day.spots}\n        selected = {day.name === props.value}\n        setDay = {props.onChange}\n      />\n    );\n  });\n\n  return (\n    <ul>\n      {days}\n    </ul>\n  );\n\n}","import React from \"react\";\n\n//Render element for appointment header\nexport default function Header(props) {\n\n  return (\n    <header className=\"appointment__time\">\n      <h4 className=\"text--semi-bold\">{props.time}</h4>\n      <hr className=\"appointment__separator\" />\n    </header>\n  );\n}","import React from \"react\";\n\n//Render element for adding a new appointment\nexport default function Empty(props) {\n  return (\n    \n    <main className=\"appointment__add\">\n      <img\n        onClick={props.onAdd}\n        className=\"appointment__add-button\"\n        src=\"images/add.png\"\n        alt=\"Add\"\n      />\n    </main>\n    \n  );\n}","import React from \"react\";\n\n//Render element for showing info on an existing appointment\nexport default function Show(props) {\n  \n  return (\n\n    <main className=\"appointment__card appointment__card--show\">\n\n      <section className=\"appointment__card-left\">\n        <h2 className=\"text--regular\">{props.student}</h2>\n\n        <section className=\"interviewer\">\n          <h4 className=\"text--light\">Interviewer</h4>\n          <h3 className=\"text--regular\">{props.interviewer}</h3>\n        </section>\n      </section>\n\n      <section className=\"appointment__card-right\">\n        <section className=\"appointment__actions\">\n          <img\n            onClick={() => props.onEdit()}\n            className=\"appointment__actions-button\"\n            src=\"images/edit.png\"\n            alt=\"Edit\"\n          />\n          \n          <img\n            onClick={() => props.onDelete('ask for confirmation before deleting')}\n            className=\"appointment__actions-button\"\n            src=\"images/trash.png\"\n            alt=\"Delete\"\n          />\n        </section>\n      </section>\n\n    </main>\n\n  );\n}","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport \"components/Button.scss\";\n\n//create a default button element that dynamically changes style and name based on props passed in\nexport default function Button(props) {\n    \n   \n\n  //classnames is a js module it takes in 2 parameters, a string and an object, the string will always return but the object will return the key(s) only if the value of that key equals to truthy. This module is better than using if statements\n  let buttonClass = classNames(\n    //button will always return as a classname since it's the default class\n    'button',\n    {\n      //this will only return if \"confirm\" is passed as a prop, same for the pairs below\n      \"button--confirm\": props.confirm,\n      \"button--danger\": props.danger\n    }\n  );\n  return (\n    <button\n      className={buttonClass}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n}","import React from \"react\";\nimport classNames from \"classnames\";\nimport \"components/InterviewerListItem.scss\";\n\n\n//this is renders a single item for an interviewer\n//Depending on the state it displays different styles\nexport default function InterviewerListItem(props) {\n  \n  //apply different classes depending on the state\n  let interviewerClass = classNames(\n    \"interviewers__item\",\n    {\n      \"interviewers__item--selected\": props.selected\n    }\n  );\n\n  return (\n    <li\n      className={interviewerClass}\n      onClick={props.setInterviewer}\n    >\n      <img\n        className=\"interviewers__item-image\"\n        src={props.avatar}\n        alt={props.name}\n      />\n      {props.selected && props.name}\n    </li>\n  );\n}","import React from \"react\";\nimport \"components/InterviewerList.scss\";\nimport InterviewerListItem from \"components/InterviewerListItem\";\nimport PropTypes from 'prop-types';\n\n//Render a list of InterviewerListItem components passing in default props\n//iterate through an array of objects and for each object render an HTML element\nfunction InterviewerList(props) {\n  \n  const interviewers = props.interviewers.map((interviewer) => {\n    return (\n      <InterviewerListItem\n        key = {interviewer.id}\n        name = {interviewer.name}\n        avatar = {interviewer.avatar}\n        selected = {interviewer.id === props.value}\n        setInterviewer = {() => props.onChange(interviewer.id)}\n      />\n    );\n  });\n\n  return (\n    <section className=\"interviewers\">\n      <h4 className=\"interviewers__header text--light\">Interviewer</h4>\n      <ul className=\"interviewers__list\">{interviewers}</ul>\n    </section>\n  );\n}\n\n//using propTypes to limit the interviewers prop to be an array\nInterviewerList.propTypes = {\n  interviewers: PropTypes.array.isRequired\n};\n\nexport default InterviewerList;","import React, {useState} from 'react';\nimport Button from \"components/Button\";\nimport InterviewerList from \"components/InterviewerList.js\";\nimport \"components/Appointment/styles.scss\";\n\n//Render element to create edit or delete a new appointment\nexport default function Form(props) {\n  \n  const [student, setStudent] = useState(props.student || \"\");\n  const [interviewer, setInterviewer] = useState(props.interviewer || null);\n  const [error, setError] = useState(\"\");\n\n  const reset = () => {\n    setStudent(\"\");\n    setInterviewer(null);\n  };\n  const cancel = () => {\n    reset();\n    props.onCancel();\n  };\n\n  //Checks if a name was typed into the form and if an instructor was selected, otherwise don't save the appointment\n  const validate = () => {\n    if (student && interviewer) {\n      setError(\"\");\n      return props.onSave(student, interviewer);\n    }\n\n    if (!interviewer) {\n      setError(\"Please select an interviewer\");\n    }\n\n    if (!student) {\n      setError(\"Student name cannot be blank\");\n    }\n  };\n\n  return (\n\n    <main className=\"appointment__card appointment__card--create\">\n      <section className=\"appointment__card-left\">\n        <form onSubmit={event => event.preventDefault()} autoComplete=\"off\">\n          <input\n            className=\"appointment__create-input text--semi-bold\"\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Enter Student Name\"\n            value={student}\n            //The student state stores the info typed into the form. If an existing interview is edited the student state will automatically be populated with the name of the student from the appointment being edited\n            onChange={(event) => {\n              setError(\"\");\n              setStudent(event.target.value);\n            }}\n            data-testid=\"student-name-input\"\n          />\n          <section className=\"appointment__validation\">\n            {error}\n          </section>\n        </form>\n        <InterviewerList\n          interviewers={props.interviewers}\n          value={interviewer}\n          onChange = {setInterviewer}\n        />\n      </section>\n      \n      <section className=\"appointment__card-right\">\n        <section className=\"appointment__actions\">\n          <Button onClick={cancel} danger>\n            Cancel\n          </Button>\n          \n          <Button\n            onClick={\n              validate\n            }\n            confirm\n          >Save\n          </Button>\n\n        </section>\n      </section>\n    </main>\n\n  );\n}","import React from \"react\";\n\n//Render element for loading status\nexport default function Status(props) {\n  return (\n\n    <main className=\"appointment__card appointment__card--status\">\n      <img\n        className=\"appointment__status-image\"\n        src=\"images/status.png\"\n        alt=\"Loading\"\n      />\n      <h1 className=\"text--semi-bold\">{props.message}</h1>\n    </main>\n\n  );\n}","import React from \"react\";\nimport Button from \"components/Button\";\n\n//Render element for confirming an appointment\nexport default function Confirm(props) {\n  return (\n\n    <main className=\"appointment__card appointment__card--confirm\">\n      <h1 className=\"text--semi-bold\">{props.message}</h1>\n      <section className=\"appointment__actions\">\n        <Button danger onClick={props.onCancel}>Cancel</Button>\n        <Button danger onClick={()=>props.onConfirm()}>Confirm</Button>\n      </section>\n    </main>\n\n  );\n}","import React from \"react\";\n\n//Render element for prompting client about an error appointment\nexport default function Error(props) {\n  return (\n\n    <main className=\"appointment__card appointment__card--error\">\n      <section className=\"appointment__error-message\">\n        <h1 className=\"text--semi-bold\">Error</h1>\n        <h3 className=\"text--light\">{props.message}</h3>\n      </section>\n      <img\n        onClick={props.onClose}\n        className=\"appointment__error-close\"\n        src=\"images/close.png\"\n        alt=\"Close\"\n      />\n    </main>\n\n  );\n}","import React from \"react\";\nimport Header from \"components/Appointment/Header\";\nimport Empty from \"components/Appointment/Empty\";\nimport Show from \"components/Appointment/Show\";\nimport Form from \"components/Appointment/Form.js\";\nimport Status from \"components/Appointment/Status.js\";\nimport Confirm from \"components/Appointment/Confirm.js\";\nimport Error from \"components/Appointment/Error\";\nimport {useVisualMode} from \"../../hooks/useVisualMode\";\n\nimport \"components/Appointment/styles.scss\";\n\n//Render appointment element\nexport default function Appointment(props) {\n\n  //These are the different modes, depending on what value \"mode\" contains a different component will be rendered\n  const EMPTY = \"EMPTY\";\n  const SHOW = \"SHOW\";\n  const CREATE = \"CREATE\";\n  const EDIT = \"EDIT\";\n  const SAVING = \"SAVING\";\n  const DELETING = \"DELETING\";\n  const CONFIRM = \"CONFIRM\";\n  const ERROR_SAVE = \"ERROR_SAVE\";\n  const ERROR_DELETE = \"ERROR_DELETE\";\n\n  //The function below is a custom hook with 3 functionalities; 1) keeps track of the previous state, so that you can go back one step if needed(triggered by the cancel button). 2) checks the current mode(a single string). 3) transitions/changes the value of \"mode\"(check variables above for more info on modes)\n  const { mode, transition, back } = useVisualMode(\n    props.interview ? SHOW : EMPTY\n  );\n\n  //Save a new interview to the server\n  function save(name, interviewer) {\n    //The object sets values to be passed into bookInterview function. \"name\" and \"interviewer\" are arguments passed in through the Forms.js file\n    const interview = {\n      student: name,\n      interviewer\n    };\n\n    transition(SAVING);\n\n    props.bookInterview(props.id, interview)\n      .then(() => {\n        transition(SHOW);\n      })\n      .catch((e) => {\n        transition(ERROR_SAVE, true);\n      });\n  }\n\n  //Delete an interview. Takes in a confirmation argument. The 1st time the delete button is clicked the user is prompt with a cancel or confirm warning, the received argument lets this function know if the user clicked the confirm button or if the user is clicking on the delete button for the 1st time\n  const deleteInterview = (confirmation) => {\n    \n    if (confirmation) {\n      transition(CONFIRM);\n    } else {\n      transition(DELETING, true);\n\n      props.cancelInterview(props.id)\n        .then(()=>{\n          transition(EMPTY);\n        })\n        .catch((e) => {\n          transition(ERROR_DELETE, true);\n        });\n    }\n  };\n  \n  const edit = () => {\n    transition(EDIT);\n  };\n\n  return (\n    <article className=\"appointment\" data-testid=\"appointment\">\n      <Header\n        time={props.time}\n      />\n      {mode === EMPTY &&\n        <Empty onAdd={() => transition(CREATE)} />}\n      \n      {mode === SHOW && (\n        <Show\n          student={props.interview.student}\n          interviewer={props.interview.interviewer.name}\n          onDelete={deleteInterview}\n          onEdit={edit}\n        />\n      )}\n\n      {mode === CREATE && (\n        <Form\n          interviewers={props.interviewers}\n          onSave={save}\n          onCancel={back}\n        />\n      )}\n\n      {mode === EDIT && (\n        <Form\n          student={props.interview.student}\n          interviewer={props.interview.interviewer.id}\n\n          interviewers={props.interviewers}\n          onSave={save}\n          onCancel={back}\n        />\n      )}\n\n      {mode === SAVING && (\n        <Status\n          message=\"Saving\"\n        />\n      )}\n\n      {mode === DELETING && (\n        <Status\n          message=\"Deleting\"\n        />\n      )}\n\n      {mode === CONFIRM && (\n        <Confirm\n          message=\"Are you sure you would like to delete?\"\n          onCancel={back}\n          onConfirm={deleteInterview}\n        />\n      )}\n\n      {mode === ERROR_DELETE && (\n        <Error\n          onClose={back}\n          message=\"Could not delete appointment\"\n        />\n      )}\n\n      {mode === ERROR_SAVE && (\n        <Error\n          onClose={back}\n          message=\"Could not save appointment\"\n        />\n      )}\n\n    </article>\n  );\n}","import { useState } from \"react\";\n\n//custom hook that keep track of previous state, so that you can go back one step\nexport function useVisualMode(initialMode) {\n  const [mode, setMode] = useState(initialMode);\n  const [history, setHistory] = useState([initialMode]);\n  \n  //transition to the next state\n  function transition(newMode, replace = false) {\n\n    if (replace) {\n      setHistory((prev) => [...prev]);\n      setMode(newMode);\n    } else {\n      //add the newest state to history(this method of storing data is called stack data structure. Where you store info in an array and to go back one step you use history.pop() to delete the last value(which would be the current), the access the last data value of the array)\n      setHistory((prev) => [...prev, newMode]);\n      setMode(newMode);\n    }\n  }\n  \n  //store previous state\n  function back() {\n    //This checks if the history has at least more than one item, otherwise the code that comes next would delete the last remaining item from the array then try to access a a null array\n    if (history.length > 1) {\n      //we are going to use .pop() method, this will mutate the array, so we need to make a copy of the original array beforehand\n      let historyCopy = [...history];\n      historyCopy.pop();\n      setHistory(historyCopy);\n      setMode(historyCopy[historyCopy.length - 1]);\n    }\n  }\n\n  return {mode, transition, back};\n}","import React from \"react\";\n\nimport \"components/Application.scss\";\nimport DayList from \"components/DayList\";\nimport Appointment from \"components/Appointment\";\n\nimport {getAppointmentsForDay} from '../helpers/selectors.js';\nimport {getInterviewersForDay} from '../helpers/selectors.js';\nimport {getInterview} from '../helpers/selectors.js';\nimport useApplicationData from '../hooks/useApplicationData.js';\n\nexport default function Application() {\n  //variables below manages the state changes from the component rendered in Application.js file\n  const {\n    state,\n    setDay,\n    bookInterview,\n    cancelInterview,\n  } = useApplicationData();\n\n  //set an array with all appointments for a selected day\n  const dailyAppointments = getAppointmentsForDay(state, state.day);\n\n  //set an array with all interviewers for a selected day\n  const dailyInterviewers = getInterviewersForDay(state, state.day);\n  \n  //render loop through data and one appointment for each object in the array\n  const renderAppointment = dailyAppointments.map((appointment) => {\n    \n    const interview = getInterview(state, appointment.interview);\n    return (\n      <Appointment\n        key={appointment.id}\n        id={appointment.id}\n        time={appointment.time}\n        interview={interview}\n        interviewers={dailyInterviewers}\n        bookInterview={bookInterview}\n        cancelInterview={cancelInterview}\n      />\n    );\n  });\n\n  //inside nav element add DayList(this element renders one button per each object in an array, this array is defined as \"days\" declared as an attribute witch is a prop that is then accessed by the elements created within the DayList element)\n  \n  return (\n    <main className=\"layout\">\n      \n      <section className=\"sidebar\">\n        <img\n          className=\"sidebar--centered\"\n          src=\"images/logo.png\"\n          alt=\"Interview Scheduler\"\n        />\n        <hr className=\"sidebar__separator sidebar--centered\" />\n        \n        <nav className=\"sidebar__menu\">\n          <DayList\n            days={state.days}\n            value={state.day}\n            onChange={setDay}\n          />\n        </nav>\n        \n        <img\n          className=\"sidebar__lhl sidebar--centered\"\n        />\n      </section>\n\n      <section className=\"schedule\">\n        {renderAppointment}\n        <Appointment key=\"last\" time=\"5pm/\" />\n      </section>\n\n    </main>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n//Manages the state changes from the component rendered in Application.js file\nexport default function useApplicationData() {\n  //setting the default states\n  const [state, setState] = useState({\n    day: \"Monday\",\n    days: [],\n    appointments: {},\n    interviewers: {}\n  });\n\n  //When an interview is booked or deleted the amount of spots remaining for the particular day is updated within this function.\n  function updateSpots(appointments) {\n\n    //hold the index for the selected day\n    let index;\n    let mutatedDays = {};\n    let remainingSpots = 0;\n\n    //loop through days, find the selected day and set index to the corresponding day\n    state.days.map((day) =>{\n      if (state.day === day.name) {\n        return index = day.id - 1;\n      }\n      return null;\n    });\n\n    //when index is assigned a value use that to find the spots remaining for the selected day and update the value\n    if (index !== undefined) {\n      \n      //count remaining spots\n      state.days[index].appointments.map((appointmentId)=>{\n        if (!appointments[`${appointmentId}`].interview) {\n          return remainingSpots += 1;\n        }\n        return null;\n      });\n      \n      //change the day array\n      mutatedDays = {\n        ...state.days,\n        [index]: {...state.days[index], spots: remainingSpots}\n      };\n\n    }\n\n    //this is the new array of days to place in state\n    const mutatedDaysArr = Object.values(mutatedDays);\n    \n\n    if (mutatedDaysArr.length > 0) {\n      return mutatedDaysArr;\n    }\n    return null;\n  }\n\n  //The function is called in the components/Appointment/index.js file as a passed down prop. It creates an object using current state values then sends that info through an API request in order to save a new appointment in the database. After all that it updates the current state with the new data that wat typed in the form(this is triggered when the save button is clicked)\n  function bookInterview(id, interview) {\n    const appointment = {\n      ...state.appointments[id],\n      interview: { ...interview }\n    };\n    \n    const appointments = {\n      ...state.appointments,\n      [id]: appointment\n    };\n\n    const days = updateSpots(appointments);\n    \n    return axios\n      // .put(`http://localhost:8001/api/appointments/${id}`,\n      .put(`http://54.236.160.67:8001/api/appointments/${id}`,\n        appointment\n      )\n      .then(() => {\n        \n        setState({\n          ...state,\n          days,\n          appointments\n        });\n\n      });\n  }\n\n  //Find the appointment by the passed in id and set it equal to null, then do an API request to delete the selected appointment and when the request is resolved update the state to also remove the appointment\n  function cancelInterview(id) {\n    \n    const interview = {\n      ...state.appointments[id],\n      interview: null\n    };\n    const appointments = {\n      ...state.appointments,\n      [id]: interview\n    };\n\n    const days = updateSpots(appointments);\n   \n\n    return axios\n      // .delete(`http://localhost:8001/api/appointments/${id}`)\n      .delete(`http://54.236.160.67:8001/api/appointments/${id}`)\n      .then(() => {\n        setState({\n          ...state,\n          days,\n          appointments\n        });\n      });\n  }\n\n  //updates the day value inside state object\n  const setDay = day => setState((prev) => ({ ...prev, day }));\n\n  //API request to the database for days array\n\n  useEffect(() => {\n\n    //this axios API request is used to reset the database every time a new user accesses the website, so that there is no accumulation of unexpected info for the next user\n    // axios.get(\"http://localhost:8001/api/debug/reset\")\n    axios.get(\"http://54.236.160.67:8001/api/debug/reset\")\n\n          //as soon as the database is reset all of the default database info is loaded and displayed to the user. Every time the page refreshed the database will go back to the default values\n         .then(() =>{\n\n          Promise.all([\n            // axios.get(\"http://localhost:8001/api/days\"),\n            axios.get(\"http://54.236.160.67:8001/api/days\"),\n            // axios.get(\"http://localhost:8001/api/appointments\"),\n            axios.get(\"http://54.236.160.67:8001/api/appointments\"),\n            // axios.get(\"http://localhost:8001/api/interviewers\")\n            axios.get(\"http://54.236.160.67:8001/api/interviewers\")\n          ])\n            .then((all) => {\n              setState((prev) => {\n                if (all[0].data) {\n                  return ({\n                    ...prev,\n                    days: all[0].data,\n                    appointments: all[1].data,\n                    interviewers: all[2].data\n                  });\n                } else {\n                  return ({\n                    ...prev,\n                    days: all[0],\n                    appointments: all[1],\n                    interviewers: all[2]\n                  });\n                }\n              });\n            });\n      \n\n         })\n\n    \n  },[]);\n\n  const finalObj = {\n    state,\n    setDay,\n    bookInterview,\n    cancelInterview,\n  };\n  return finalObj;\n}","//state is an object containing days(an array of objects that contains days of the week and related appointments) and appointments(an object of objects containing information regarding each appointment). The function below returns an array of all appointments for a specific day(informed in the second argument)\nexport function getAppointmentsForDay(state, day) {\n  const final = [];\n  let appointments;\n\n  //if days data is empty return an empty array\n  if (state.days.length === 0) {\n    return final;\n  }\n\n  //checking the object key for all appointments occurring in the specified date(coming from the argument)\n  for (let i of state.days) {\n    if (day === i.name) {\n      appointments = i.appointments;\n    }\n  }\n\n  //if the day informed through the argument is not found return an empty array\n  if (!appointments) {\n    return final;\n  }\n\n  //pushing into the final array all objects containing the info on appointments for the specified day\n  for (let i of appointments) {\n    final.push(state.appointments[`${i}`]);\n  }\n  return final;\n}\n\n\n//return an object that contains the interview data if it is passed an object that contains an interviewer. Otherwise, the function should return null.\nexport function getInterview(state, interview) {\n  if (interview === null) {\n    return null;\n  }\n\n  const final = {\n    student: interview.student,\n    interviewer: state.interviewers[`${interview.interviewer}`]\n  };\n \n  return final;\n}\n\n//takes in a day and the state object and returns an array of all interviewers\nexport function getInterviewersForDay(state, day) {\n  const final = [];\n  let interviewersId;\n\n  //if days data is empty return an empty array\n  if (state.days.length === 0) {\n    return final;\n  }\n\n  //checking the object key for all appointments occurring in the specified date(coming from the argument)\n  for (let i of state.days) {\n    if (day === i.name) {\n      interviewersId = i['interviewers'];\n    }\n  }\n  \n  //if the day informed through the argument is not found return an empty array\n  if (!interviewersId) {\n    return final;\n  }\n  \n  //pushing into the final array name of interviewers available on the specified day\n  for (let i of interviewersId) {\n    if (state.interviewers[`${i}`]) {\n      final.push(state.interviewers[`${i}`]);\n    }\n  }\n  return final;\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"index.scss\";\n\nimport Application from \"components/Application\";\n\nReactDOM.render(<Application />, document.getElementById(\"root\"));\n"],"sourceRoot":""}